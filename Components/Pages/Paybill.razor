@page "/Paybill"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div @onclick="CloseDropdown">

    <header class="d-flex align-items-center justify-content-center" style="z-index: 1;">
        <div class="text-center bg-opacity-100 d-flex align-items-center ">
            <img src="/assets/logo.png" alt="Zameco Logo" class="me-3 mt-2"
                 style="width: 60px; height: auto;">
            <div>
                <h1 class="mt-2" style="font-size: 25px; color: #DC0000">Z A M E C O II</h1>
                <p style="color: #DC0000; font-size: 8px;">ZAMBALES II ELECTRIC COOPERATIVE, INC.</p>
            </div>
        </div>
    </header>


    <div class="container" style="z-index: 1;">


        <div class="card mb-4">
            <div class="card-body">
                <div class="dropdown">
                    <button class=" d-flex justify-content-between align-items-center btn btn-light btnbtn-outline-info w-100 fs-2 "
                            @onclick="ToggleDropdown"
                            @onclick:stopPropagation
                            style="font-size: 15px;">
                        <div class="align-items-start">
                            Select your bill here:
                            <i class="bi bi-caret-down-fill"></i>
                        </div>
                        <div class="align-items-end">₱@Total.ToString("F2")</div>
                    </button>
                    @if (isDropdownOpen)
                    {
                        <ul class="dropdown-menu show w-100 mt-2"
                        @onclick:stopPropagation
                            style="font-size: 20px;">
                            @foreach (var bill in Bills)
                            {
                                <li>
                                    <label class="dropdown-item d-flex align-items-center justify-content-between">
                                        <input class="form-check-input" type="checkbox" value="@bill.Amount"
                                               checked="@bill.IsSelected"
                                               onfocus="ToggleDropdown"
                                               onfocusout="ToggleDropdown"
                                               @onchange="async (e) => await OnBillSelectionChanged(bill, e)"
                                               data-bill-name="@bill.Date.ToString("MM/dd/yyyy")">@bill.Date.ToString("MM/dd/yyyy")
                                        <span class="align-items-end">₱@bill.Amount.ToString("F2")</span>
                                    </label>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
            <div class="mb-3">
                <div class="card bg-success bg-opacity-10 m-3">
                    <div class="card-body ">
                        <h5 class="card-title ">Selected Bills:</h5>
                        <ul id="selectedBillsList" class="card-body list-group list-group-numbered">
                            @foreach (var bill in Bills.Where(b => b.IsSelected))
                            {
                                <li class="list-group-item-success d-flex justify-content-between align-items-center">
                                    @bill.Date.ToString("MM/dd/yyyy")
                                    <span class="">₱@bill.Amount.ToString("F2")</span>
                                </li>
                            }
                            @if (!HasSelectedBills)
                            {
                                <li class="card-text list-group-item-success text-muted ">No bills selected</li>
                            } 
                            <li class="list-group-item-info d-flex justify-content-between align-items-center fs-4">
                                Total:
                                <span class=" fs-4 badge bg-success">@Total.ToString("F2")</span>
                            </li>
                        </ul>
                    </div>
                </div>
                
            </div>
        </div>

        <div class="card mb-4" style="z-index: 1;">
            <div class="card-body rounded text-center"
                 style="background-color: #fff; /* box-shadow: 10px 10px 5px pink; */">
                <h3 style="color: rgba(0, 0, 0, 0.527);">Please insert your payment</h3>
                <h1>Total amount inserted <br> ₱ @AmountInserted.ToString("F2") </h1>
            </div>
        </div>

        <div class="row justify-content-between mt-3" style="z-index: 1;">
            <div class="col-auto">
                <button type="button" class="btn btn-danger" style="font-size: 20px;" @onclick="NavigateBack">Cancel</button>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-success" style="font-size: 20px;"
                        disabled="@(!HasSelectedBills)" @onclick="ProcessPayment">
                    Proceed
                </button>
            </div>
        </div>
    </div>
</div>




<!-- Loading Modal -->
@if (isLoading)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <div class="spinner-border text-primary" role="status">
                    </div>
                    <p class="mt-3">Please wait while we process your request.</p>
                </div>
            </div>
        </div>
    </div>
}

<!-- error Modal -->
@if (showErrorModal)
{
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Error</h5>
                </div>
                <div class="modal-body">
                    <p id="errorMessage">@ErrorMessage.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<Bill> Bills { get; set; } = new();
    private decimal Total { get; set; }
    private decimal AmountInserted { get; set; }
    private bool isDropdownOpen;
    private bool isLoading;
    private bool showErrorModal;
    private string ErrorMessage = "An error occurred while processing your request.";
    private DateTime DueDate = DateTime.Now.AddDays(14);

    private bool HasSelectedBills => Bills.Any(b => b.IsSelected);
    private bool CanProceed => HasSelectedBills && AmountInserted >= Total;

    protected override void OnInitialized()
    {
        Bills = new List<Bill>
        {
            new() { Date = DateTime.Now.AddDays(-30), Amount = 1325.00m },
            new() { Date = DateTime.Now, Amount = 1455.00m }
        };
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
        StateHasChanged();
    }
    private void CloseDropdown()
    {
        isDropdownOpen = false;
    }

    private void UpdateTotal() =>
        Total = Bills.Where(b => b.IsSelected).Sum(b => b.Amount);

    private async Task ProcessPayment()
    {
        try
        {
            isLoading = true;
            await Task.Delay(2000); // Simulate processing
            await PrintReceipt();
            ResetForm();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to process payment. Please try again.";
            showErrorModal = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PrintReceipt()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "Receipt printed successfully!");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to print receipt. Please try again.";
            showErrorModal = true;
        }
    }

    private async Task OnBillSelectionChanged(Bill bill, ChangeEventArgs e)
    {
        bill.IsSelected = (bool)e.Value;
        UpdateTotal();
        await InvokeAsync(StateHasChanged);
    }

    private void NavigateBack() => NavigationManager.NavigateTo("/");

    private void CloseErrorModal() => showErrorModal = false;

    private void ResetForm()
    {
        foreach (var bill in Bills)
        {
            bill.IsSelected = false;
        }
        AmountInserted = 0;
        Total = 0;
        StateHasChanged();
    }

    private class Bill
    {
        public DateTime Date { get; set; }
        public decimal Amount { get; set; }
        public bool IsSelected { get; set; }
    }
}



